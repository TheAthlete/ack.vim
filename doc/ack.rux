*ack.txt*   Плагин для интеграции ack с Vim

==============================================================================
Author:  Antoine Imbert <antoine.imbert+ackvim@gmail.com>         *ack-author*
License: Same terms as Vim itself (see |license|)

Плагин доступен, если не установлена опция 'compatible'.

{У Vi нет ничего из этого}

==============================================================================
Введение                                                      *ack*

Плагин является клиентом для Perl-модуля App::Ack. Ack может быть использован
для замены grep. Плагин позволяет запустить ack из vim, и отобразить результат
в разделённом окне.

:Ack[!] [опции] {шаблон} [{директория}]                       *:Ack*

    Ищет рекурсивно в {директории} (по умолчанию - текущая директория)
    по {шаблону}. Работает так же, как и команда |:grep|, но открывает
    окно |Quickfix|. Если модификатор [!] не задан, то происходит перемещение
    к первому вхождению шаблона.

:AckAdd [опции] {шаблон} [{директория}]                       *:AckAdd*

    То же, что и |:Ack|, но вместо создания нового списка, происходит
    дополнение обрануженных соответствий к существующему списку |quickfix|.

:AckFromSearch [{директория}]                                 *:AckFromSearch*

    То же, что и |:Ack|, но используется шаблон из предыдушего поиска.

:LAck [опции] {шаблон} [{директория}]                         *:LAck*

    То же, что и |:Ack|, но вместо списка быстрых исправлений |quickfix|,
    обнаруженные соответствия помещаются в текущий список
    расположений |location-list|.

:LAckAdd [опции] {шаблон} [{директория}]                      *:LAckAdd*

    То же, что и |:AckAdd|, но вместо списка быстрых исправлений |quickfix|,
    происходит дополнение обнаруженных соответствий к существующему списку
    расположений |location-list|.

:AckFile [опции] {шаблон} [{директория}]                      *:AckFile*

    Ищет рекурсивно в {директории} (по умолчанию - текущая директория)
    по именам файлов соответствующих {шаблону}. Работает так же, как и
    команда |:grep|, но открывает окно |Quickfix|.

:AckHelp[!] [опции] {шаблон}                                  *:AckHelp*

    Ищет в файлах документации vim по {шаблону}. Работает так же, как и
    команда |:Ack|, но ищет только файлы .txt документации vim.

:LAckHelp [опции] {шаблон}                                    *:LAckHelp*

    То же, что и |:AckHelp|, но вместо списка быстрых исправлений |quickfix|,
    происходит дополнение обнаруженных соответствий к существующему списку
    расположений |location-list|.

:AckWindow[!] [опции] {шаблон}                                *:AckWindow*

    Ищет во всех буферах, видимых на экране (только для текущей вкладки)
    по {шаблону}.

:LAckWindow [опции] {шаблон}                                  *:LAckWindow*

    То же, что и |:AckWindow|, но вместо списка быстрых исправлений |quickfix|,
    происходит дополнение обнаруженных соответствий к существующему списку
    расположений |location-list|.

Файлы, содержащие строки, соответствующие заданному шаблону, будут выведены в
разделлённом окне вместе с номером строки соответствия, один раз для каждого
соответствия. Нажатие клавиши <Enter> на строке в этом окне открывает файл и
помещает курсор на соответствующую строку.

Обратите внимание, что плагин Dispatch.vim (подключается с помощью опции
|g:ack_use_dispatch|) на данный момент не поддерживает списки расположений
|location-list|.  Версии команд с префиксом `:LAck`, приведенные выше, будут
выдавать предупреждение, и вместо этого вы перейдете на использование списка
быстрых исправленй |quickfix|.

Более подробная информация по поиску с помощью ack размещена на сайте
https://beyondgrep.com/.


==============================================================================
КОНФИГУРАЦИЯ                                               *ack-configuration*

                                                                    *g:ackprg*
g:ackprg
Значение по умолчанию для ubuntu: "ack-grep"
Значение по умолчанию для других ОС: "ack"

Используйте данную опцию для указания команды поиска и её аргументов
по умолчанию.

Пример:
>
        let g:ackprg = "ag --vimgrep"
<
                                                       *g:ack_default_options*
g:ack_default_options
Значение по умолчанию: " -s -H --nocolor --nogroup --column"

Используйте данную опцию для указания аргументов по умолчанию, заданных для
команды поиска `ack`. Эта опция не будет использоваться, если опция |g:ackprg|
была изменена. Если вы используете команду поиска, отличную от Ack, то укажите
ваши предпочитаемые параметры в |g:ackprg|.

ЗАМЕЧАНИЕ: Эта опция может быть признана устаревшей в будущем. ~

Пример:
>
        let g:ack_default_options =
              \ " -s -H --nocolor --nogroup --column --smart-case --follow"
<
                                                       *g:ack_apply_qmappings*
g:ack_apply_qmappings
Значение по умолчанию: 1

Данная опция включает привязки в окне |quickfix|.

                                                       *g:ack_apply_lmappings*
g:ack_apply_lmappings
Значение по умолчанию: 1

Данная опция включает привязки в окнах |location-list|.

                                                              *g:ack_mappings*
g:ack_mappings
Значение по умолчанию: {
      \ "t": "<C-W><CR><C-W>T",
      \ "T": "<C-W><CR><C-W>TgT<C-W>j",
      \ "o": "<CR>",
      \ "O": "<CR><C-W><C-W>:ccl<CR>",
      \ "go": "<CR><C-W>j",
      \ "h": "<C-W><CR><C-W>K",
      \ "H": "<C-W><CR><C-W>K<C-W>b",
      \ "v": "<C-W><CR><C-W>H<C-W>b<C-W>J<C-W>t",
      \ "gv": "<C-W><CR><C-W>H<C-W>b<C-W>J" }

Данная опция позволяет расширять и переопределять привязки в окнах
|quickfix| и |location-list|.

Например, если вы хотите открыть результат в середине экрана:
>
        let g:ack_mappings = { "o": "<CR>zz" }
<
                                                              *g:ack_qhandler*
g:ack_qhandler
Значение по умолчанию: "botright copen"

Команда для открытия окна |quickfix| с возможностью указать расположение и
размер окна.

Например, если вы хотите открыть окно |quickfix| размером в 30 строк:
>
        let g:ack_qhandler = "botright copen 30"
<
                                                              *g:ack_lhandler*
g:ack_lhandler
Значение по умолчанию: "botright lopen"

Команда для открытия окна |location-list| с возможностью указать расположение и
размер окна.

Например, если вы хотите открыть окно |location-list| размером в 30 строк:
>
        let g:ack_lhandler = "botright lopen 30"
<
                                                              *g:ackhighlight*
g:ackhighlight
Значение по-умолчанию: 0

Используйте данную опцию для выделения шаблона поиска.

Пример:
>
        let g:ackhighlight = 1
<
                                                             *g:ack_autoclose*
g:ack_autoclose
Значение по умолчанию: 0

Используйте данную опцию для указания закрывать окно |quickfix| после
использования любой команды привязки.

Пример:
>
        let g:ack_autoclose = 1
<
                                                      *g:ack_autofold_results*
g:ack_autofold_results
Значение по умолчанию: 0

Используйте данную опцию для создания областей складок в окне |quickfix| по
имени файла. По умолчанию будет открыта текущая складка, и, когда при перемещении
между результатми с помощью клавиш 'j' и 'k' курсор будет под следующей
складкой, придыдущая будет скрыта, а текущая открыта.

Пример:
>
        let g:ack_autofold_results = 1
<
                                                                *g:ackpreview*
g:ackpreview
Значение по умолчанию: 0

Используйте данную опцию для автоматического открытия файла по 'j' или 'k'.

Пример:
>
        let g:ackpreview = 1
<
                                                          *g:ack_use_dispatch*
g:ack_use_dispatch
Значение по умолчанию: 0

Используйте данную опцию для запуска поиска в фоновом режиме с помощью плагина
vim-dispatch, с различными запускаемыми серверами для разных систем.

Из-за ограничений плагина Dispatch в данный момент списки расположений не
поддерживаются и окно с результатами появится до того, как данные будут
готовы. Тем не менее, это может быть приемлемым компромиссом для очень крупных
проектов, где поиск выполняется медленно.

Пример:
>
        let g:ack_use_dispatch = 1
<
                                             *g:ack_use_cword_for_empty_search*
g:ack_use_cword_for_empty_search
Значение по умолчанию: 1

Используйте данную опцию для включения поиска слова под курсором в случае
пустого шаблона поиска. Если данная опция не установлена, то, в случае
отсутствия шаблона поиска, будет выведено сообщение об ошибке.

Пример:
>
        let g:ack_use_cword_for_empty_search = 0
<
==============================================================================
ПРИВЯЗКИ                                                        *ack-mappings*

Следующие сочетания клавиш доступны в окнах |quickfix| и |location-list|:

?                   вывод краткой справки по данным привязкам.

o                   открыть файл (то же, что и Enter).

O                   открыть файл и закрыть окно быстрых исправлений |quickfix|.

go                  предпросмотр файла (открыть, но оставить фокус на окне быстрых исправлений |quickfix|).

t                   открыть в новой вкладке.

T                   открыть в новой вкладке без перехода в неё.

h                   открыть в горизонтально разделённом окне.

H                   открыть в горизонтально разделённом окне, но оставить фокус на окне быстрых исправлений |quickfix|.

v                   открыть в вертикально разделённом окне.

gv                  открыть в вертикально разделённом окне, но оставить фокус на окне быстрых исправлений |quickfix|.

q                   закрыть список быстрых исправлений |quickfix|.

Для настройки и переопределения данных привязок, смотрите |g:ack_mappings|.

==============================================================================
Игнорирование файлов                                              *ack-ignore*

Если вы используете этот плагин с утилитой ag (The Silver Searcher), имейте в
виду следующее:

    - он использует шаблоны из файлов игнорирования СУВ (систем управления
    версиями) .gitignore и .hgignore;

    - если вы не желаете искать другие файлы в репозитории, добавьте их в файл
    .agignore;

==============================================================================
ISSUES AND FAQ                                            *ack-issues-and-faq*

I don't want to jump to the first result automatically.~

    Use `:Ack!`, with bang. If you want this behavior most of the time, you
    might like an abbreviation or mapping in your personal config, something
    like these:
>
        cnoreabbrev Ack Ack!
        nnoremap <Leader>a :Ack!<Space>
<
    Most of the `:[L]Ack*` commands support this. Note that this behavior
    follows the convention of Vim's built-in |:grep| and |:make| commands.

I use NERDTree and opening ack.vim results in a vertical split displacing it.~

    You are probably using NERDTree with its default alignment at the left
    side of the window. Set these custom mappings in your vimrc to work around
    this:
>
        let g:ack_mappings = {
              \  'v':  '<C-W><CR><C-W>L<C-W>p<C-W>J<C-W>p',
              \ 'gv': '<C-W><CR><C-W>L<C-W>p<C-W>J' }
<
    This solution will be improved in the future.

Results show a mix of relative and absolute paths, making them hard to read.~

    This is a quirk of Vim that can happen with plain |:vimgrep| too. You can
    try this in your vimrc to work around it:
>
        autocmd BufAdd * exe "cd" fnameescape(getcwd())
<
    but for some users this may be disruptive to their Vim workflow. For more
    details, see:

        http://vi.stackexchange.com/a/4816/7174
        https://github.com/mileszs/ack.vim/issues/143

vim:set et sw=4 ts=4 tw=78:
